!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).mapboxGlDrawPassingMode=t()}(this,(function(){"use strict";const e="add",t="move",o="pointer",n="none",i="polygon",r="line_string",s="point",a="Feature",l="Polygon",u="LineString",c="Point",d="simple_select",p="draw.create",h="feature",g="vertex",f="true",y="false";function m(e){const t=e.featureTarget;return!!t&&(!!t.properties&&t.properties.meta===g)}function C(e){return 27===e.keyCode}function v(e){return 13===e.keyCode}const M={onSetup:function(){const t=this.newFeature({type:a,properties:{},geometry:{type:c,coordinates:[]}});return this.addFeature(t),this.clearSelectedFeatures(),this.updateUIClasses({mouse:e}),this.activateUIButton(s),this.setActionableState({trash:!0}),{point:t}},stopDrawingAndRemove:function(e){this.deleteFeature([e.point.id],{silent:!0}),this.changeMode(d)}};M.onTap=M.onClick=function(e,o){this.updateUIClasses({mouse:t}),e.point.updateCoordinate("",o.lngLat.lng,o.lngLat.lat),this.map.fire(p,{features:[e.point.toGeoJSON()]}),this.changeMode(d,{featureIds:[e.point.id]})},M.onStop=function(e){this.activateUIButton(),e.point.getCoordinate().length||this.deleteFeature([e.point.id],{silent:!0})},M.toDisplayFeatures=function(e,t,o){const n=t.properties.id===e.point.id;if(t.properties.active=n?f:y,!n)return o(t)},M.onTrash=M.stopDrawingAndRemove,M.onKeyUp=function(e,t){if(C(t)||v(t))return this.stopDrawingAndRemove(e,t)};const{onSetup:S,onClick:I,...w}=M,k={originOnSetup:S,originOnClick:I,...w};function x(e,t){return!!e.lngLat&&(e.lngLat.lng===t[0]&&e.lngLat.lat===t[1])}k.onSetup=function(e){const t=this.originOnSetup();return t.callBack=e,t},k.onTap=k.onClick=function(e,o){this.updateUIClasses({mouse:t}),e.point.updateCoordinate("",o.lngLat.lng,o.lngLat.lat),"function"==typeof e.callBack?e.callBack(e.point.toGeoJSON()):this.map.fire("draw.passing-create",{features:[e.point.toGeoJSON()]}),this.changeMode(d,{},{silent:!0})},k.onMouseMove=function(t,o){this.updateUIClasses({mouse:e}),t.point.updateCoordinate(o.lngLat.lng,o.lngLat.lat)},k.onStop=function(e){this.activateUIButton(),this.deleteFeature([e.point.id],{silent:!0})};var F={enable(e){setTimeout((()=>{e.map&&e.map.doubleClickZoom&&e._ctx&&e._ctx.store&&e._ctx.store.getInitialConfigValue&&e._ctx.store.getInitialConfigValue("doubleClickZoom")&&e.map.doubleClickZoom.enable()}),0)},disable(e){setTimeout((()=>{e.map&&e.map.doubleClickZoom&&e.map.doubleClickZoom.disable()}),0)}};function V(e,t,o,n){return{type:a,properties:{meta:g,parent:e,coord_path:o,active:n?f:y},geometry:{type:c,coordinates:t}}}const U={onSetup:function(t){const o=(t=t||{}).featureId;let n,i,s="forward";if(o){if(n=this.getFeature(o),!n)throw new Error("Could not find a feature with the provided featureId");let e=t.from;if(e&&"Feature"===e.type&&e.geometry&&"Point"===e.geometry.type&&(e=e.geometry),e&&"Point"===e.type&&e.coordinates&&2===e.coordinates.length&&(e=e.coordinates),!e||!Array.isArray(e))throw new Error("Please use the `from` property to indicate which point to continue the line from");const r=n.coordinates.length-1;if(n.coordinates[r][0]===e[0]&&n.coordinates[r][1]===e[1])i=r+1,n.addCoordinate(i,...n.coordinates[r]);else{if(n.coordinates[0][0]!==e[0]||n.coordinates[0][1]!==e[1])throw new Error("`from` should match the point at either the start or the end of the provided LineString");s="backwards",i=0,n.addCoordinate(i,...n.coordinates[0])}}else n=this.newFeature({type:a,properties:{},geometry:{type:u,coordinates:[]}}),i=0,this.addFeature(n);return this.clearSelectedFeatures(),F.disable(this),this.updateUIClasses({mouse:e}),this.activateUIButton(r),this.setActionableState({trash:!0}),{line:n,currentVertexPosition:i,direction:s}},clickAnywhere:function(t,o){if(t.currentVertexPosition>0&&x(o,t.line.coordinates[t.currentVertexPosition-1])||"backwards"===t.direction&&x(o,t.line.coordinates[t.currentVertexPosition+1]))return this.changeMode(d,{featureIds:[t.line.id]});this.updateUIClasses({mouse:e}),t.line.updateCoordinate(t.currentVertexPosition,o.lngLat.lng,o.lngLat.lat),"forward"===t.direction?(t.currentVertexPosition++,t.line.updateCoordinate(t.currentVertexPosition,o.lngLat.lng,o.lngLat.lat)):t.line.addCoordinate(0,o.lngLat.lng,o.lngLat.lat)},clickOnVertex:function(e){return this.changeMode(d,{featureIds:[e.line.id]})},onMouseMove:function(e,t){e.line.updateCoordinate(e.currentVertexPosition,t.lngLat.lng,t.lngLat.lat),m(t)&&this.updateUIClasses({mouse:o})}};U.onTap=U.onClick=function(e,t){if(m(t))return this.clickOnVertex(e,t);this.clickAnywhere(e,t)},U.onKeyUp=function(e,t){v(t)?this.changeMode(d,{featureIds:[e.line.id]}):C(t)&&(this.deleteFeature([e.line.id],{silent:!0}),this.changeMode(d))},U.onStop=function(e){F.enable(this),this.activateUIButton(),void 0!==this.getFeature(e.line.id)&&(e.line.removeCoordinate(`${e.currentVertexPosition}`),e.line.isValid()?this.map.fire(p,{features:[e.line.toGeoJSON()]}):(this.deleteFeature([e.line.id],{silent:!0}),this.changeMode(d,{},{silent:!0})))},U.onTrash=function(e){this.deleteFeature([e.line.id],{silent:!0}),this.changeMode(d)},U.toDisplayFeatures=function(e,t,o){console.log("ðŸš€ ~ file: draw_line_string.js ~ line 136 ~ geojson",t);const n=t.properties.id===e.line.id;if(t.properties.active=n?f:y,!n)return o(t);t.geometry.coordinates.length<2||(t.properties.meta=h,o(V(e.line.id,t.geometry.coordinates["forward"===e.direction?t.geometry.coordinates.length-2:1],""+("forward"===e.direction?t.geometry.coordinates.length-2:1),!1)),o(t))};const{onSetup:L,onMouseMove:P,...b}=U,O={originOnSetup:L,originOnMouseMove:P,...b};O.onSetup=function(e){const t=this.originOnSetup();return t.callBack=e,t},O.onMouseMove=function(t,o){this.updateUIClasses({mouse:e}),this.originOnMouseMove(t,o)},O.onStop=function(e){const t=e.line||e.polygon;this.updateUIClasses({mouse:n}),F.enable(this),this.activateUIButton(),void 0!==this.getFeature(t.id)&&(t.removeCoordinate(`${e.currentVertexPosition}`),t.isValid()&&("function"==typeof e.callBack?e.callBack(t.toGeoJSON()):this.map.fire("draw.passing-create",{features:[t.toGeoJSON()]})),this.deleteFeature([t.id],{silent:!0}),this.changeMode(d,{},{silent:!0}))};const B={onSetup:function(){const t=this.newFeature({type:a,properties:{},geometry:{type:l,coordinates:[[]]}});return this.addFeature(t),this.clearSelectedFeatures(),F.disable(this),this.updateUIClasses({mouse:e}),this.activateUIButton(i),this.setActionableState({trash:!0}),{polygon:t,currentVertexPosition:0}},clickAnywhere:function(t,o){if(t.currentVertexPosition>0&&x(o,t.polygon.coordinates[0][t.currentVertexPosition-1]))return this.changeMode(d,{featureIds:[t.polygon.id]});this.updateUIClasses({mouse:e}),t.polygon.updateCoordinate(`0.${t.currentVertexPosition}`,o.lngLat.lng,o.lngLat.lat),t.currentVertexPosition++,t.polygon.updateCoordinate(`0.${t.currentVertexPosition}`,o.lngLat.lng,o.lngLat.lat)},clickOnVertex:function(e){return this.changeMode(d,{featureIds:[e.polygon.id]})},onMouseMove:function(e,t){e.polygon.updateCoordinate(`0.${e.currentVertexPosition}`,t.lngLat.lng,t.lngLat.lat),m(t)&&this.updateUIClasses({mouse:o})}};B.onTap=B.onClick=function(e,t){return m(t)?this.clickOnVertex(e,t):this.clickAnywhere(e,t)},B.onKeyUp=function(e,t){C(t)?(this.deleteFeature([e.polygon.id],{silent:!0}),this.changeMode(d)):v(t)&&this.changeMode(d,{featureIds:[e.polygon.id]})},B.onStop=function(e){this.updateUIClasses({mouse:n}),F.enable(this),this.activateUIButton(),void 0!==this.getFeature(e.polygon.id)&&(e.polygon.removeCoordinate(`0.${e.currentVertexPosition}`),e.polygon.isValid()?this.map.fire(p,{features:[e.polygon.toGeoJSON()]}):(this.deleteFeature([e.polygon.id],{silent:!0}),this.changeMode(d,{},{silent:!0})))},B.toDisplayFeatures=function(e,t,o){const n=t.properties.id===e.polygon.id;if(t.properties.active=n?f:y,!n)return o(t);if(0===t.geometry.coordinates.length)return;const i=t.geometry.coordinates[0].length;if(!(i<3)){if(t.properties.meta=h,o(V(e.polygon.id,t.geometry.coordinates[0][0],"0.0",!1)),i>3){const n=t.geometry.coordinates[0].length-3;o(V(e.polygon.id,t.geometry.coordinates[0][n],`0.${n}`,!1))}if(i<=4){const e=[[t.geometry.coordinates[0][0][0],t.geometry.coordinates[0][0][1]],[t.geometry.coordinates[0][1][0],t.geometry.coordinates[0][1][1]]];if(o({type:a,properties:t.properties,geometry:{coordinates:e,type:u}}),3===i)return}return o(t)}},B.onTrash=function(e){this.deleteFeature([e.polygon.id],{silent:!0}),this.changeMode(d)};const{onSetup:_,onMouseMove:A,...T}=B,G={originOnSetup:_,originOnMouseMove:A,...T};return G.onSetup=function(e){const t=this.originOnSetup();return t.callBack=e,t},G.onMouseMove=function(t,o){this.updateUIClasses({mouse:e}),this.originOnMouseMove(t,o)},G.onStop=function(e){const t=e.line||e.polygon;this.updateUIClasses({mouse:n}),F.enable(this),this.activateUIButton(),void 0!==this.getFeature(t.id)&&(t.removeCoordinate(`${e.currentVertexPosition}`),t.isValid()&&("function"==typeof e.callBack?e.callBack(t.toGeoJSON()):this.map.fire("draw.passing-create",{features:[t.toGeoJSON()]})),this.deleteFeature([t.id],{silent:!0}),this.changeMode(d,{},{silent:!0}))},{passing_draw_point:k,passing_draw_line_string:O,passing_draw_polygon:G}}));
