!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).mapboxGlDrawPassingMode={})}(this,(function(e){"use strict";const t="add",o="move",n="pointer",i="none",r="polygon",s="line_string",a="point",u="Feature",l="Polygon",c="LineString",d="Point",p="simple_select",h="draw.create",g="feature",f="vertex",y="true",m="false";function C(e){const t=e.featureTarget;return!!t&&(!!t.properties&&t.properties.meta===f)}function w(e){return 27===e.keyCode}function v(e){return 13===e.keyCode}const M={onSetup:function(){const e=this.newFeature({type:u,properties:{},geometry:{type:d,coordinates:[]}});return this.addFeature(e),this.clearSelectedFeatures(),this.updateUIClasses({mouse:t}),this.activateUIButton(a),this.setActionableState({trash:!0}),{point:e}},stopDrawingAndRemove:function(e){this.deleteFeature([e.point.id],{silent:!0}),this.changeMode(p)}};M.onTap=M.onClick=function(e,t){this.updateUIClasses({mouse:o}),e.point.updateCoordinate("",t.lngLat.lng,t.lngLat.lat),this.map.fire(h,{features:[e.point.toGeoJSON()]}),this.changeMode(p,{featureIds:[e.point.id]})},M.onStop=function(e){this.activateUIButton(),e.point.getCoordinate().length||this.deleteFeature([e.point.id],{silent:!0})},M.toDisplayFeatures=function(e,t,o){const n=t.properties.id===e.point.id;if(t.properties.active=n?y:m,!n)return o(t)},M.onTrash=M.stopDrawingAndRemove,M.onKeyUp=function(e,t){if(w(t)||v(t))return this.stopDrawingAndRemove(e,t)};const{onSetup:S,onClick:I,...x}=M,F={originOnSetup:S,originOnClick:I,...x};function V(e,t){return!!e.lngLat&&(e.lngLat.lng===t[0]&&e.lngLat.lat===t[1])}F.onSetup=function(e){const t=this.originOnSetup(),{onDraw:o,onCancel:n}=e;return t.onDraw=o,t.onCancel=n,t},F.onTap=F.onClick=function(e,t){this.updateUIClasses({mouse:o}),e.point.updateCoordinate("",t.lngLat.lng,t.lngLat.lat),"function"==typeof e.onDraw?e.onDraw(e.point.toGeoJSON()):this.map.fire("draw.passing-create",{features:[e.point.toGeoJSON()]}),this.changeMode(p,{},{silent:!0})},F.onMouseMove=function(e,o){this.updateUIClasses({mouse:t}),e.point.updateCoordinate(o.lngLat.lng,o.lngLat.lat)},F.onStop=function(e){const t=e.point;void 0!==this.getFeature(t.id)?(this.activateUIButton(),this.deleteFeature([e.point.id],{silent:!0})):"function"==typeof e.onCancel&&e.onCancel()};var U={enable(e){setTimeout((()=>{e.map&&e.map.doubleClickZoom&&e._ctx&&e._ctx.store&&e._ctx.store.getInitialConfigValue&&e._ctx.store.getInitialConfigValue("doubleClickZoom")&&e.map.doubleClickZoom.enable()}),0)},disable(e){setTimeout((()=>{e.map&&e.map.doubleClickZoom&&e.map.doubleClickZoom.disable()}),0)}};function P(e,t,o,n){return{type:u,properties:{meta:f,parent:e,coord_path:o,active:n?y:m},geometry:{type:d,coordinates:t}}}const b={onSetup:function(e){const o=(e=e||{}).featureId;let n,i,r="forward";if(o){if(n=this.getFeature(o),!n)throw new Error("Could not find a feature with the provided featureId");let t=e.from;if(t&&"Feature"===t.type&&t.geometry&&"Point"===t.geometry.type&&(t=t.geometry),t&&"Point"===t.type&&t.coordinates&&2===t.coordinates.length&&(t=t.coordinates),!t||!Array.isArray(t))throw new Error("Please use the `from` property to indicate which point to continue the line from");const s=n.coordinates.length-1;if(n.coordinates[s][0]===t[0]&&n.coordinates[s][1]===t[1])i=s+1,n.addCoordinate(i,...n.coordinates[s]);else{if(n.coordinates[0][0]!==t[0]||n.coordinates[0][1]!==t[1])throw new Error("`from` should match the point at either the start or the end of the provided LineString");r="backwards",i=0,n.addCoordinate(i,...n.coordinates[0])}}else n=this.newFeature({type:u,properties:{},geometry:{type:c,coordinates:[]}}),i=0,this.addFeature(n);return this.clearSelectedFeatures(),U.disable(this),this.updateUIClasses({mouse:t}),this.activateUIButton(s),this.setActionableState({trash:!0}),{line:n,currentVertexPosition:i,direction:r}},clickAnywhere:function(e,o){if(e.currentVertexPosition>0&&V(o,e.line.coordinates[e.currentVertexPosition-1])||"backwards"===e.direction&&V(o,e.line.coordinates[e.currentVertexPosition+1]))return this.changeMode(p,{featureIds:[e.line.id]});this.updateUIClasses({mouse:t}),e.line.updateCoordinate(e.currentVertexPosition,o.lngLat.lng,o.lngLat.lat),"forward"===e.direction?(e.currentVertexPosition++,e.line.updateCoordinate(e.currentVertexPosition,o.lngLat.lng,o.lngLat.lat)):e.line.addCoordinate(0,o.lngLat.lng,o.lngLat.lat)},clickOnVertex:function(e){return this.changeMode(p,{featureIds:[e.line.id]})},onMouseMove:function(e,t){e.line.updateCoordinate(e.currentVertexPosition,t.lngLat.lng,t.lngLat.lat),C(t)&&this.updateUIClasses({mouse:n})}};b.onTap=b.onClick=function(e,t){if(C(t))return this.clickOnVertex(e,t);this.clickAnywhere(e,t)},b.onKeyUp=function(e,t){v(t)?this.changeMode(p,{featureIds:[e.line.id]}):w(t)&&(this.deleteFeature([e.line.id],{silent:!0}),this.changeMode(p))},b.onStop=function(e){U.enable(this),this.activateUIButton(),void 0!==this.getFeature(e.line.id)&&(e.line.removeCoordinate(`${e.currentVertexPosition}`),e.line.isValid()?this.map.fire(h,{features:[e.line.toGeoJSON()]}):(this.deleteFeature([e.line.id],{silent:!0}),this.changeMode(p,{},{silent:!0})))},b.onTrash=function(e){this.deleteFeature([e.line.id],{silent:!0}),this.changeMode(p)},b.toDisplayFeatures=function(e,t,o){const n=t.properties.id===e.line.id;if(t.properties.active=n?y:m,!n)return o(t);t.geometry.coordinates.length<2||(t.properties.meta=g,o(P(e.line.id,t.geometry.coordinates["forward"===e.direction?t.geometry.coordinates.length-2:1],""+("forward"===e.direction?t.geometry.coordinates.length-2:1),!1)),o(t))};const{onSetup:L,onMouseMove:O,...k}=b,D={originOnSetup:L,originOnMouseMove:O,...k};D.onSetup=function(e){const t=this.originOnSetup(),{onDraw:o,onCancel:n}=e;return t.onDraw=o,t.onCancel=n,t},D.onMouseMove=function(e,o){this.updateUIClasses({mouse:t}),this.originOnMouseMove(e,o)},D.onStop=function(e){const t=e.line;this.updateUIClasses({mouse:i}),U.enable(this),this.activateUIButton();void 0!==this.getFeature(t.id)?(t.removeCoordinate(`${e.currentVertexPosition}`),t.isValid()&&("function"==typeof e.onDraw?e.onDraw(t.toGeoJSON()):this.map.fire("draw.passing-create",{features:[t.toGeoJSON()]})),this.deleteFeature([t.id],{silent:!0}),this.changeMode(p,{},{silent:!0})):"function"==typeof e.onCancel&&e.onCancel()};const _={onSetup:function(){const e=this.newFeature({type:u,properties:{},geometry:{type:l,coordinates:[[]]}});return this.addFeature(e),this.clearSelectedFeatures(),U.disable(this),this.updateUIClasses({mouse:t}),this.activateUIButton(r),this.setActionableState({trash:!0}),{polygon:e,currentVertexPosition:0}},clickAnywhere:function(e,o){if(e.currentVertexPosition>0&&V(o,e.polygon.coordinates[0][e.currentVertexPosition-1]))return this.changeMode(p,{featureIds:[e.polygon.id]});this.updateUIClasses({mouse:t}),e.polygon.updateCoordinate(`0.${e.currentVertexPosition}`,o.lngLat.lng,o.lngLat.lat),e.currentVertexPosition++,e.polygon.updateCoordinate(`0.${e.currentVertexPosition}`,o.lngLat.lng,o.lngLat.lat)},clickOnVertex:function(e){return this.changeMode(p,{featureIds:[e.polygon.id]})},onMouseMove:function(e,t){e.polygon.updateCoordinate(`0.${e.currentVertexPosition}`,t.lngLat.lng,t.lngLat.lat),C(t)&&this.updateUIClasses({mouse:n})}};_.onTap=_.onClick=function(e,t){return C(t)?this.clickOnVertex(e,t):this.clickAnywhere(e,t)},_.onKeyUp=function(e,t){w(t)?(this.deleteFeature([e.polygon.id],{silent:!0}),this.changeMode(p)):v(t)&&this.changeMode(p,{featureIds:[e.polygon.id]})},_.onStop=function(e){this.updateUIClasses({mouse:i}),U.enable(this),this.activateUIButton(),void 0!==this.getFeature(e.polygon.id)&&(e.polygon.removeCoordinate(`0.${e.currentVertexPosition}`),e.polygon.isValid()?this.map.fire(h,{features:[e.polygon.toGeoJSON()]}):(this.deleteFeature([e.polygon.id],{silent:!0}),this.changeMode(p,{},{silent:!0})))},_.toDisplayFeatures=function(e,t,o){const n=t.properties.id===e.polygon.id;if(t.properties.active=n?y:m,!n)return o(t);if(0===t.geometry.coordinates.length)return;const i=t.geometry.coordinates[0].length;if(!(i<3)){if(t.properties.meta=g,o(P(e.polygon.id,t.geometry.coordinates[0][0],"0.0",!1)),i>3){const n=t.geometry.coordinates[0].length-3;o(P(e.polygon.id,t.geometry.coordinates[0][n],`0.${n}`,!1))}if(i<=4){const e=[[t.geometry.coordinates[0][0][0],t.geometry.coordinates[0][0][1]],[t.geometry.coordinates[0][1][0],t.geometry.coordinates[0][1][1]]];if(o({type:u,properties:t.properties,geometry:{coordinates:e,type:c}}),3===i)return}return o(t)}},_.onTrash=function(e){this.deleteFeature([e.polygon.id],{silent:!0}),this.changeMode(p)};const{onSetup:A,onMouseMove:T,...G}=_,B={originOnSetup:A,originOnMouseMove:T,...G};B.onSetup=function(e){const t=this.originOnSetup(),{onDraw:o,onCancel:n}=e;return t.onDraw=o,t.onCancel=n,t},B.onMouseMove=function(e,o){this.updateUIClasses({mouse:t}),this.originOnMouseMove(e,o)},B.onStop=function(e){const t=e.polygon;this.updateUIClasses({mouse:i}),U.enable(this),this.activateUIButton();void 0!==this.getFeature(t.id)?(t.removeCoordinate(`${e.currentVertexPosition}`),t.isValid()&&("function"==typeof e.onDraw?e.onDraw(t.toGeoJSON()):this.map.fire("draw.passing-create",{features:[t.toGeoJSON()]})),this.deleteFeature([t.id],{silent:!0}),this.changeMode(p,{},{silent:!0})):"function"==typeof e.onCancel&&e.onCancel()},e.passing_draw_line_string=D,e.passing_draw_point=F,e.passing_draw_polygon=B,Object.defineProperty(e,"__esModule",{value:!0})}));
